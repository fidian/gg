#!/usr/bin/env bash
#/ Git Groups
#/
#/ Manage a collection of multiple git repositories collectively.
#/
#/ Very similar to the "repo" project that governs Android.  This is a
#/ lighter-weight alternative and written to not require Python.
#/
#/ Usage:
#/
#/    gg COMMAND [OPTIONS]
#/
#
# Want more?  Head over to the website
#
# https://github.com/fidian/gg - This loader script
# https://github.com/fidian/gg-core - The bulk of the project

set -eEu -o pipefail
shopt -s extdebug
IFS=$'\n\t'

programName=gg
programVersion=2  # Change when internals are updated
metaDir=.gg  # Updated to a full path later
rootDir=$PWD  # Updated to auto detect parent later
coreRepo=https://github.com/fidian/gg-core.git

errorNoMetaDir() {
    cat >&2 <<EOF
Must initialize a folder first.

Use:  $programName init URL

For more assistance:  $programName help
EOF
    return 1
}

findMetaDir() {
    while [[ -n "$rootDir" ]]; do
        if [[ -d "$rootDir/$metaDir" ]]; then
            metaDir="$rootDir/$metaDir"
            return 0
        fi

        rootDir=${rootDir%/*}
    done

    # Allow the root to be in / (highly inadvisable, but possible)
    if [[ -d "$rootDir/$metaDir" ]]; then
        metaDir="$rootDir/$metaDir"
        return 0
    fi

    return 1
}

loadCore() {
    for F in "$metaDir/gg-core/lib/"* "$metaDir/gg-core/commands/"*; do
        if [[ -f "$F" ]] && [[ "$(head -n 1 "$F")" == "#!"* ]]; then
            . "$F"
        fi
    done

    manifestLoad
}

cmdHelp() {
    grep "^#/" "$0" | cut -b 4-
    echo "Commands:"
    echo ""

    if ! commandHelp 2>/dev/null; then
        cat << EOF
   help            Show this help message.  A much better help message
                   appears after you init a repository.
   init URL [DIR]  Initialize a group of repositories.  The URL is the
                   location of a git repository and DIR is where it goes.
                   The DIR can be automatically inferred from URL.
EOF
    fi
}

cmdInit() {
    local dest files

    if [[ -z "${1-}" ]]; then
        echo "Must specify a URL" >&2
        return 1
    fi

    if [[ -z "${2-}" ]]; then
        dest=${1-}
        dest=${dest%%#*}
        dest=${dest##*/}
        dest=${dest%.git}
    else
        dest=$2
    fi

    if [[ -d "$dest" ]]; then
        if [[ -e "$dest/.gg" ]]; then
            echo "$dest is already an initialized gg folder." >&2
            exit 1
        fi

        # Match against "*", ".*" and "..*" where it does not match against
        # the directories "." nor "..".
        files=("$dest"/* "$dest"/.[^.]* "$dest"/..?*)

        if [[ -e "${files[0]}" ]] || [[ -e "${files[1]}" ]] || [[ -e "${files[2]}" ]]; then
            echo "$dest is not an empty folder." >&2
            exit 1
        fi
    else
        mkdir "$dest"
    fi

    cd "$dest"

    status "Creating meta dir: $metaDir"
    mkdir -p "$metaDir"

    status "Cloning gg-core: $1"
    git clone "$coreRepo" "$metaDir/gg-core"

    status "Cloning manifest: $1"
    git clone "$1" "$metaDir/manifest"

    status "Initialization complete."
    echo "Your next action will probably be: $programName sync"
}

status() {
    echo "*** ""$@"
}

if [[ -z "${1-}" ]] || [[ "$1" == "help" ]]; then
    if ! findMetaDir; then
        cmdHelp
        exit
    fi

    loadCore
    cmdHelp
    exit
fi

if [[ "$1" == "init" ]]; then
    shift
    cmdInit "$@"
    exit
fi

if ! findMetaDir; then
    errorNoMetaDir
    exit
fi

cd "$rootDir"
loadCore
commandRun "$@"
